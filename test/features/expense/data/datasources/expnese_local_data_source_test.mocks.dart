// Mocks generated by Mockito 5.4.4 from annotations
// in my_money_v3/test/features/expense/data/datasources/expnese_local_data_source_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:my_money_v3/core/db/db.dart' as _i2;
import 'package:my_money_v3/shared/data/models/category_model.dart' as _i4;
import 'package:my_money_v3/shared/data/models/expense_model.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i1.Mock implements _i2.DatabaseHelper {
  @override
  _i3.Future<String> addCategory(_i4.CategoryModel? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #addCategory,
          [category],
        ),
        returnValue: _i3.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #addCategory,
            [category],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #addCategory,
            [category],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<List<_i4.CategoryModel>> getCategories() => (super.noSuchMethod(
        Invocation.method(
          #getCategories,
          [],
        ),
        returnValue:
            _i3.Future<List<_i4.CategoryModel>>.value(<_i4.CategoryModel>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.CategoryModel>>.value(<_i4.CategoryModel>[]),
      ) as _i3.Future<List<_i4.CategoryModel>>);

  @override
  _i3.Future<void> addExpanse(_i6.ExpenseModel? expense) => (super.noSuchMethod(
        Invocation.method(
          #addExpanse,
          [expense],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteExpanse(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteExpanse,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<bool> deleteCategory(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteCategory,
          [id],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<List<_i6.ExpenseModel>> getExpenses([
    int? fromDate,
    int? toDate,
    String? categoryId,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #getExpenses,
          [
            fromDate,
            toDate,
            categoryId,
          ],
        ),
        returnValue:
            _i3.Future<List<_i6.ExpenseModel>>.value(<_i6.ExpenseModel>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i6.ExpenseModel>>.value(<_i6.ExpenseModel>[]),
      ) as _i3.Future<List<_i6.ExpenseModel>>);

  @override
  _i3.Future<Map<String, dynamic>> getHomeInfo() => (super.noSuchMethod(
        Invocation.method(
          #getHomeInfo,
          [],
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
        returnValueForMissingStub:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<List<Map<String, dynamic>>> getBackup() => (super.noSuchMethod(
        Invocation.method(
          #getBackup,
          [],
        ),
        returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
        returnValueForMissingStub: _i3.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<List<Map<String, dynamic>>> getReport() => (super.noSuchMethod(
        Invocation.method(
          #getReport,
          [],
        ),
        returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
        returnValueForMissingStub: _i3.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i3.Future<List<Map<String, dynamic>>>);
}
